package miniproject.service.converter;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import miniproject.endpoint.response.DetailPemesananResponse;
import miniproject.endpoint.response.PemesananResponse;
import miniproject.model.DetailPemesananModel;
import miniproject.model.PemesanModel;
import miniproject.model.PemesananModel;
import miniproject.repository.dto.PemesanDto;
import miniproject.repository.dto.PemesananDto;

public class PemesananConverter implements IPemesananConverter{

	@Override
	public PemesananDto createFrom(PemesananModel pemesananEntity) {
		PemesananDto pemesananDto = new PemesananDto();
		pemesananDto.setIdPemesanan(pemesananEntity.getIdPemesanan());
		pemesananDto.setKeteranganPemesanan(pemesananEntity.getKeteranganPemesanan());
		pemesananDto.setTanggalPemesanan(pemesananEntity.getTanggalPemesanan());
		pemesananDto.setPemesan(pemesananEntity.getPemesanPemesanan().getIdPemesan());
		return pemesananDto;
	}
	
	public PemesananDto convertCreat(PemesananModel pemesananEntity) {
		PemesananDto pemesananDto = new PemesananDto();
		pemesananDto.setIdPemesanan(pemesananEntity.getIdPemesanan());
		pemesananDto.setKeteranganPemesanan(pemesananEntity.getKeteranganPemesanan());
		pemesananDto.setTanggalPemesanan(pemesananEntity.getTanggalPemesanan());
		return pemesananDto;
	}
	
	public PemesananResponse convertToDto(PemesananModel pemesanan) {
		PemesananDto pemesanandto = new PemesananDto();
		pemesanandto.setIdPemesanan(pemesanan.getIdPemesanan());
		pemesanandto.setIdPemesan(pemesanan.getPemesanPemesanan().getIdPemesan());
		pemesanandto.setKeteranganPesanan(pemesanan.getKeteranganPemesanan());
		pemesanandto.setTanggalPemesanan(pemesanan.getTanggalPemesanan());
		pemesanandto.setListDetailPemesananResponse(PemesanandetailConvert(pemesanan.getDetailPesanan()));
		return response;
	}
	public List<DetailPemesananResponse>PemesanandetailConvert(Set<DetailPemesananModel> detail){
		List<DetailPemesananResponse> detailPemesanalist = new ArrayList<DetailPemesananResponse>();
		detail.stream().forEach(x -> detailPemesanalist.add(convertToResponsedetail(x)));
		return detailPemesanalist;
	}
	
	public DetailPemesananResponse convertToResponsedetail(DetailPemesananModel detailPemesanan) {
		DetailPemesananResponse response = new DetailPemesananResponse();
		response.setIdDetailpemesanan(detailPemesanan.getIdDetailpemesanan());
		response.setIdPemesanan(detailPemesanan.getPemesananId());
		response.setidBarang(detailPemesanan.getBarang().getNamaBarang());
		response.setJumlahBarang(detailPemesanan.getJumlah_barang());
		return response;
	}
	
	@Override
	public PemesananModel createFrom(PemesananDto pemesananDto) {
		return updateEntity(new PemesananModel(), pemesananDto);
	}

	@Override
	public PemesananModel updateEntity(PemesananModel pemesanan, PemesananDto pemesananDto) {
		pemesanan.setIdPemesanan(pemesananDto.getIdPemesanan());
		pemesanan.setKeteranganPemesanan(pemesananDto.getKeteranganPemesanan());
		pemesanan.setTanggalPemesanan(pemesananDto.getTanggalPemesanan());
		return pemesanan;
	}
	
	public PemesanModel convertPemesanEntity(PemesanDto pemesanDto) {
		PemesanModel pemesan = new PemesanModel();
		pemesan.setAlamatPemesan(pemesanDto.getAlamatPemesan());
		pemesan.setIdPemesan(pemesanDto.getIdPemesan());
		pemesan.setNamaPemesan(pemesanDto.getNamaPemesan());
		pemesan.setTelphonePemesan(pemesanDto.getTelphonePemesan());	
		return pemesan;
	}
	
}
